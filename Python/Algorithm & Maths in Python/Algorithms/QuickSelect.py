# -*- coding: utf-8 -*-
"""
Created on Sun Jun 18 20:01:40 2017

@author: Tirtha
"""
import random
def SelectiSmallest (A,i):
    n = len(A)
    if (n==1):
        print ("By quickselect: {}".format(A[0]))
        return (A[0])
    else:
        low = []
        high = []
        p=A[random.randint(0,n-1)]
        # If random pivot is the max element, just create a one-element list 'high' with it and put all other elements in 'low', don't recurse
        if p==max(A):
            high.append(p)
            A.remove(p)
            low=A
        else:
             for j in range(len(A)):
                 if (A[j]<=p):
                     low.append(A[j])
                 else:
                     high.append(A[j])
        if i<=len(low):
             SelectiSmallest(low,i)
        else:
             SelectiSmallest(high,i-len(low))

# Test list initialization
l = []
# Number of elements in the list
Nt = 10
# i-th smallest element
i = 8
# List elements randomly generated by selecting integeres from 1 to 500
for k in range(Nt):
    l.append(random.randint(1,500))
# Check for duplicate elements
if (len(set(l))) != len(l):
    print("Duplicate elements found. This algorithm won't work. Exiting!")
else:
    a = SelectiSmallest(l,i)

# Verifying by the default list sort method
sorted_list=sorted(l)
print ("By sorting: {}".format(sorted_list[i-1]))
